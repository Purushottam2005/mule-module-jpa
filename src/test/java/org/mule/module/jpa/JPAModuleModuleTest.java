/**
 * This file was automatically generated by the Mule Development Kit
 */
package org.mule.module.jpa;

import domain.Dog;
import org.junit.Before;
import org.mule.api.MuleEvent;
import org.mule.construct.Flow;

import org.junit.Test;
import org.mule.tck.junit4.FunctionalTestCase;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.Assert.*;

public class JPAModuleModuleTest extends FunctionalTestCase
{
    @Override
    protected String getConfigResources() {
        return "mule-config.xml";
    }

    EntityManagerFactory entityManagerFactory;


    @Before
    public void doSetUp() {
        entityManagerFactory = muleContext.getRegistry().lookupObject("entityManagerFactory");
    }

    @Test
    public void testCanInsertAndQueryWithTransaction() throws Exception {
        Dog dog = new Dog();
        dog.setName("Cujo");
        List<Dog> expectedResults = new ArrayList<Dog>();
        expectedResults.add(dog);

        runFlowWithPayloadAndExpect("testTransactionalInsertAndQuery", expectedResults, dog);
    }
    @Test
    public void testCanInjectPersistenceContext() throws Exception {
        Dog dog = new Dog();
        dog.setName("Cujo");
        List<Dog> expectedResults = new ArrayList<Dog>();
        expectedResults.add(dog);
        runFlowWithPayloadAndExpect("testPersistenceContext", expectedResults, dog);
    }



    @Test
    public void testCanInsert() throws Exception {
        Dog dog = new Dog();
        dog.setName("Bear");
        runFlowWithPayloadAndExpect("testInsert", dog, dog);
        assertNotNull(dog.getId());
        assertTrue(dog.getId() > 0);
    }



    @Test
    public void testCanDetach() throws Exception {
        Dog dog = new Dog();
        dog.setName("Bear");
        runFlowWithPayloadAndExpect("testDetach", dog, dog);
        assertNull(dog.getId());
    }

    @Test
    public void testCanMerge() throws Exception {
        Dog dog = new Dog();
        dog.setName("Cujo");

        EntityManager entityManager = entityManagerFactory.createEntityManager();

        entityManager.getTransaction().begin();
        entityManager.persist(dog);
        entityManager.getTransaction().commit();
        entityManager.close();

        runFlowWithPayloadAndExpect("testMerge", dog, dog);
        assertNotNull(dog.getId());
    }

    @Test
    public void testCanFind() throws Exception {
        Dog dog = new Dog();
        dog.setName("Cujo");

        EntityManager entityManager = entityManagerFactory.createEntityManager();

        entityManager.getTransaction().begin();
        entityManager.persist(dog);
        entityManager.getTransaction().commit();
        entityManager.close();

        runFlowWithPayloadAndExpect("testFind", dog, 1L);
    }

    @Test
    public void testCanQuery() throws Exception {
        Dog dog = new Dog();
        dog.setName("Cujo");

        EntityManager entityManager = entityManagerFactory.createEntityManager();

        entityManager.getTransaction().begin();
        entityManager.persist(dog);
        entityManager.getTransaction().commit();
        entityManager.close();

        List<Dog> expectedResults = new ArrayList<Dog>();
        expectedResults.add(dog);

        runFlowWithPayloadAndExpect("testQuery", expectedResults, 1L);
    }

    @Test
    public void testCanQueryWithListOfParameters() throws Exception {
        Dog dog = new Dog();
        dog.setName("Cujo");

        EntityManager entityManager = entityManagerFactory.createEntityManager();

        entityManager.getTransaction().begin();
        entityManager.persist(dog);
        entityManager.getTransaction().commit();
        entityManager.close();

        List<Dog> expectedResults = new ArrayList<Dog>();
        expectedResults.add(dog);

        List<String> parameters = new ArrayList<String>();
        parameters.add("Cujo");
        runFlowWithPayloadAndExpect("testQueryWithListParameters", expectedResults, parameters);
    }

    @Test
    public void testCanQueryWithMapOfParameters() throws Exception {
        Dog dog = new Dog();
        dog.setName("Cujo");

        EntityManager entityManager = entityManagerFactory.createEntityManager();

        entityManager.getTransaction().begin();
        entityManager.persist(dog);
        entityManager.getTransaction().commit();
        entityManager.close();

        List<Dog> expectedResults = new ArrayList<Dog>();
        expectedResults.add(dog);

        Map<String,Object> parameters = new HashMap<String,Object>();
        parameters.put("name","Cujo");
        runFlowWithPayloadAndExpect("testQueryWithMapParameters", expectedResults, parameters);
    }

    @Test
    public void testCanExecuteNamedQuery() throws Exception {
        Dog dog = new Dog();
        dog.setName("Cujo");

        EntityManager entityManager = entityManagerFactory.createEntityManager();

        entityManager.getTransaction().begin();
        entityManager.persist(dog);
        entityManager.getTransaction().commit();
        entityManager.close();

        List<Dog> expectedResults = new ArrayList<Dog>();
        expectedResults.add(dog);

        Map<String,Object> parameters = new HashMap<String,Object>();
        parameters.put("name","Cujo");

        runFlowWithPayloadAndExpect("testNamedQuery", expectedResults, parameters);
    }

    @Test
    public void testCanQueryWithCriteria() throws Exception {
        Dog dog = new Dog();
        dog.setName("Cujo");

        EntityManager entityManager = entityManagerFactory.createEntityManager();

        entityManager.getTransaction().begin();
        entityManager.persist(dog);
        entityManager.getTransaction().commit();
        entityManager.close();

        List<Dog> expectedResults = new ArrayList<Dog>();
        expectedResults.add(dog);

        CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();
        CriteriaQuery<Dog> criteriaQuery = criteriaBuilder.createQuery(Dog.class);
        Root<Dog> from = criteriaQuery.from(Dog.class);

        Predicate condition = criteriaBuilder.equal(from.get("name"), "Cujo");
        criteriaQuery.where(condition);

        runFlowWithPayloadAndExpect("testQuery", expectedResults, criteriaQuery);
    }


    /**
     * Run the flow specified by name and assert equality on the expected output
     *
     * @param flowName The name of the flow to run
     * @param expect   The expected output
     */
    protected <T> void runFlowAndExpect(String flowName, T expect) throws Exception {
        Flow flow = lookupFlowConstruct(flowName);
        MuleEvent event = getTestEvent(null);
        MuleEvent responseEvent = flow.process(event);

        assertEquals(expect, responseEvent.getMessage().getPayload());
    }

    /**
     * Run the flow specified by name using the specified payload and assert
     * equality on the expected output
     *
     * @param flowName The name of the flow to run
     * @param expect   The expected output
     * @param payload  The payload of the input event
     */
    protected <T, U> void runFlowWithPayloadAndExpect(String flowName, T expect, U payload) throws Exception {
        Flow flow = lookupFlowConstruct(flowName);
        MuleEvent event = getTestEvent(payload);
        MuleEvent responseEvent = flow.process(event);

        assertEquals(expect, responseEvent.getMessage().getPayload());
    }

    /**
     * Retrieve a flow by name from the registry
     *
     * @param name Name of the flow to retrieve
     */
    protected Flow lookupFlowConstruct(String name) {
        return (Flow) muleContext.getRegistry().lookupFlowConstruct(name);
    }
}
